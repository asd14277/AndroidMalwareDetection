
# coding=UTF-8
'''
@Date: 2019-05-14 00:49:46
@Author: p4ssw0rd
@Blog: http:www.tjuscswyz.cn
'''

from .isvalidapk import *
import os
import numpy as np
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.metrics.classification import accuracy_score
import pickle
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
from sklearn.metrics import roc_curve, auc
from sklearn.externals import joblib
import codecs
from .dbn.tensorflow import *
from .getFeature import *
RF_FEATURE_PATH = './model/features.txt'
DBN_FEATURE_PATH='./model/features_permission.txt'
RF_MODEL_PATH='./model/train_model_byRandomForest_API.m'
DBN_MODEL_PATH='./model/model.pkl'
def DBNextract(name_test):
    feature_dict=get_feature_dict(DBN_FEATURE_PATH)
    feature = DBN_get_feature(name_test)
    for f in feature:
        if f in feature_dict.keys():
            feature_dict[f] = 1
    vec = []
    vecs= []
    columns = []
    for key, value in feature_dict.items():
        vec.append(value)
        columns.append(key)
    vecs.append(vec)
    df2 = pd.DataFrame(vecs, columns=columns)
    testdata = df2.values
    return DBNpred(testdata)
def RFextract(name_test):
    feature_dict=get_feature_dict(RF_FEATURE_PATH)
    feature = RF_get_feature(name_test)
    for f in feature:
        if f in feature_dict.keys():
            feature_dict[f] = 1
    vec = []
    vecs= []
    columns = []
    for key, value in feature_dict.items():
        vec.append(value)
        columns.append(key)
    vecs.append(vec)
    df2 = pd.DataFrame(vecs, columns=columns)
    testdata = df2.values
    return RFpred(testdata)
def DBNpred(testdata):
    """
        :param name_test: the feature vector of the test apk file
    """
    classifier = SupervisedDBNClassification.load(DBN_MODEL_PATH)
    malware = classifier.predict(testdata)
    print (malware)
    return malware[0]

def RFpred(testdata):
    """
        :param name_test: the feature vector of the test apk file
    """
    classifier = joblib.load(RF_MODEL_PATH)
    malware = classifier.predict(testdata)
    print (malware)
    return malware[0]

def ans(learning_method,name):
    isapk=is_valid(name)
    if isapk is True:
        if learning_method=='RF':
            malware=RFextract(name)
        elif learning_method=='DBN':
            malware=RFextract(name)
            pass
    else:
        malware=None
    return isapk,malware
