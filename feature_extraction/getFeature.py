__author__ = 'Administrator'
#coding=utf-8
from androguard.core.bytecodes import apk, dvm
from androguard.core.analysis import analysis
import re
import androguard.core.analysis.analysis
import pandas as pd
import codecs
import os
path="F:\design\DroidCC\code\droidcc\data\malware_app\VirusShare_66bdf4506f7064eb1ac540145573fd92"
malware_path=r"F:\design\DroidCC\code\droidcc\data\feature_bad_5_13" #900
begign_path=r"F:\design\DroidCC\code\droidcc\data\feature_good_5_13"   #900
Sensitive_APIs = { 
    #log
    #0 : [ "Landroid/util/Log;","d"],
    #send sms
    1: ["Landroid/telephony/SmsManager;","sendTextMessage"],
    #read sms
    2: [".","getDisplayMessageBody"],
    3: [".","getMessageBody"],
    #IMEI
    4: ["Landroid/telephony/TelephonyManager;","getDecicedId"],
    #phone number
    5: ["Landroid/telephony/TelephonyManager;","getLine1Number"],
    #get Sim serial
    6: ["Landroid/telephony/TelephonyManager;","getSimSerialNumber"],
    #Location
    7: ["Landroid/telephony/TelephonyManager;","getCellLocation"],
    #GPS
    8: [".","getLastKnownLocation"],
    9: [".","requestLocationUpdates"],
    #Recorder
    10: ["Landroid/media/MediaRecorder;","prepare"],
    #native_code
    11: ["Ljava/lang/Runtime;","exec"],
    12: ["Ljava/lang/Runtime;","load"],
    13: ["Ljava/lang/System;","load"],
    #file io
    14: ["Llibcore/io/IoBridge;", "open"],
    15: ["Llibcore/io/IoBridge;", "read"],
    16: ["Llibcore/io/IoBridge;", "write"],
    17: ["Ljava/io/File;", "create"],
    18: ["Ljava/io/File;", "delete"],
    19: ["Ljava/io/File;", "get"],
    20: ["Ljava/io/File;", "mk"],
    21: ["Ljava/io/File;", "set"],
    #get resource
    22: [".","openRawResource"],
    23: [".","getAssets"],
    #http
    24: ["Lorg/apache/http/impl/client/AbstractHttpClient;", "execute"],
    25: ["Ljava/net/HttpURLConnection;","connect"],
    26: ["Ljava/net/URL;","openConnection"],
    27: ["Ljava/net/URLConnection;","connect"],
    28: ["Ljava/net/Socket;","."],
    #ssl
    29: ["Ljavax/net/ssl;","."],
    #WebView
    30: ["Landroid/webkit/WebView;","addJavascriptInterface"],
    31: ["Landroid/webkit/WebView;","searchBoxJavaBridge_"],
    #load jar
    32: ["Ldalvik/system/DexClassLoader;","."],
    33: ["Ljava/net/URLClassLoader;","."],
    34: ["Ldalvik/system/PathClassLoader;","."],
    #ReflectionCode
    35: ["Ljava/lang/reflect/Method;", "."],
    #encrypt or SHA
    36: [".", "doFinal"],
    37: [".","digest"],
    #use camera
    38: ["Landroid/hardware/Camera;","open"],
    #query SQL(read contact\SMS)
    39: ["Landroid/content/ContentResolver;","query"],
    #SharedPreferences
    40: ["Landroid/content/SharedPreferences;","edit" ],
    #sendBroadcast
    41: [".","sendBroadcast"],
    42: [".","sendOrderedBroadcast"],
    43: [".","sendStickyBroadcast"],
    44: [".","sendStickyOrderedBroadcast"],
    #start activity
    45: [".","startActivity"],
    46: [".","startActivityForResult"],
    #Service
    47: [".","startService"],
    48: [".","bindService"],
    #write to SD card ,add by Colbert 20150120
    49: [".","getExternalStorageDirectory"],
    #input check ,add by Colbert 20150120
    50: [".","readLine"]
}
FEATURE_PATH = r"F:\design\DroidCC\code\droidcc\data\features_5_17.txt"
def get_feature_dict():
    """
    获取所有已知的特征集合，并返回dict
    :return:
    """
    with codecs.open(FEATURE_PATH, "r") as f:
        feature_list = f.read().split("\n")
   
    feature_dict = {}
    for v in feature_list:
        feature_dict[v] = 0
    for i in Sensitive_APIs:
        feature_dict[Sensitive_APIs[i][0]+'p4ssw0rd'+Sensitive_APIs[i][1]]=0 # p4ssw0rd is a flag
    return feature_dict
def get_permissions(path):
    app = apk.APK(path)
    permission = app.get_permissions()
    return permission
# def get_api(path):
#     vec=[]
#     app = apk.APK(path)
#     app_dex = dvm.DalvikVMFormat(app.get_dex())
#     app_x = analysis.Analysis(app_dex)
#     for method in app_dex.get_methods():
#         g = app_x.get_method(method)
#         for i in g.get_basic_blocks().get():
#             for ins in i.get_instructions():
#                 output = ins.get_output()
#                 for k in Sensitive_APIs:
#                     if Sensitive_APIs[k][0] in output:
#                         if Sensitive_APIs[k][1] in output:
#                             vec.append(Sensitive_APIs[k][0]+Sensitive_APIs[k][1])
#     vec=list(set(vec))
#     return vec
def get_feature(path):
    """
    获取apk特征集
    :param path:
    :return:
    """
    with codecs.open(path, "r") as f:
        feature_list = f.read().split("\n")
    feature_list = list(set(feature_list))
    return list(feature_list)
def final(Root_PATH,isbad):
    apks = os.listdir(Root_PATH)
    vecs = []
    for apk in apks:
        feature_dict=get_feature_dict()
        backup=list(feature_dict.keys())
        real_path = os.path.join(Root_PATH, apk)
        # feature_permission = get_permissions(real_path)
        
        # for i in feature_permission:
        #     tmp = i.split('.')
        #     final = tmp[-1]
        #     if i in feature_dict.keys():
        #         feature_dict[i]=1
        feature = get_feature(real_path)
        for i in feature:
            i=i.strip()
            for j in backup:
                if 'p4ssw0rd' in j:
                    package,method=j.split('p4ssw0rd')
                    if package in i and method in i:
                        feature_dict[j]=1
                        backup.remove(j)
                else:
                    if j == i:
                        feature_dict[j]=1
                        backup.remove(j)
        if isbad is True:
            feature_dict["label"] = 1
        else:
            feature_dict["label"] = 0
        vec = []
        columns = []
        for key, value in feature_dict.items():
            vec.append(value)
            columns.append(key.replace('p4ssw0rd',''))
        vecs.append(vec)
        print("%shas done."% apk)
    return vecs,columns
if __name__ == '__main__':
   
    vecs,columns=final(begign_path,False)
    vecs=vecs+final(malware_path,True)[0]
    df2 = pd.DataFrame(vecs, columns=columns)
    df2.to_csv("../data/sample-5-17.csv", index=False)
    # vecs=[]
    # for i in Sensitive_APIs:
    #     vec=[]
    #     vecs.append(Sensitive_APIs[i])
    # df=pd.DataFrame(vecs)
    # df.to_csv("../data/api.csv")
